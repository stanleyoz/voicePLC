# device_controller.py

from typing import Dict, Any, Optional, List
from device import Device
from llm_handler import LLMHandler
import json
import time
from pathlib import Path

class DeviceController:
    """Controls multiple devices and handles command processing using LLM"""
    
    def __init__(self, model_path: str, config_path: Optional[str] = None):
        self.devices: Dict[str, Device] = {}
        self._command_history: List[Dict[str, Any]] = []
        self.llm_handler = LLMHandler(model_path)
        self._load_config(config_path) if config_path else None

    def process_command(self, command: str) -> Dict[str, Any]:
        """Process a natural language command using LLM"""
        try:
            # Generate context for LLM
            context = self.llm_handler.generate_device_context(self.devices)
            
            # Parse command using LLM
            action = self.llm_handler.parse_command(command, context)
            
            # Check for parsing errors
            if "error" in action:
                return {
                    "success": False,
                    "command": command,
                    "error": self.llm_handler.enhance_error_message(action["error"])
                }
            
            # Execute the parsed action
            result = self._execute_action(action)
            
            # Generate natural language response
            nl_response = self.llm_handler.generate_response(result)
            
            response = {
                "success": True,
                "command": command,
                "result": result,
                "response": nl_response
            }
            
            # Log command
            self._log_command(command, response)
            
            return response
            
        except Exception as e:
            error_result = {
                "success": False,
                "command": command,
                "error": self.llm_handler.enhance_error_message(str(e))
            }
            self._log_command(command, error_result)
            return error_result

    def _execute_action(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """Execute a parsed action"""
        action_type = action.get("type")
        
        if action_type == "actuator_control":
            return self._handle_actuator_action(action)
        elif action_type == "sensor_read":
            return self._handle_sensor_action(action)
        elif action_type == "status_check":
            return self._handle_status_action(action)
        elif action_type == "list_devices":
            return self._handle_list_action()
        else:
            raise ValueError(f"Unknown action type: {action_type}")

    def _handle_actuator_action(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """Handle actuator control action"""
        device = self.get_device(action["device"])
        if not device:
            raise ValueError(f"Device not found: {action['device']}")
        
        success = device.control_actuator(
            action["actuator"], 
            action["action"].lower() == "on"
        )
        
        return {
            "type": "actuator_control",
            "device": device.name,
            "actuator": action["actuator"],
            "state": action["action"],
            "success": success
        }

    def _handle_sensor_action(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """Handle sensor reading action"""
        device = self.get_device(action["device"])
        if not device:
            raise ValueError(f"Device not found: {action['device']}")
        
        value = device.read_sensor(action["sensor"])
        sensor = device.get_sensor(action["sensor"])
        
        return {
            "type": "sensor_read",
            "device": device.name,
            "sensor": action["sensor"],
            "value": value,
            "unit": sensor.unit if sensor else None
        }

    def _handle_status_action(self, action: Dict[str, Any]) -> Dict[str, Any]:
        """Handle status check action"""
        device = self.get_device(action["device"])
        if not device:
            raise ValueError(f"Device not found: {action['device']}")
        
        return {
            "type": "status_check",
            "device": device.name,
            "state": device.get_state()
        }

    def _handle_list_action(self) -> Dict[str, Any]:
        """Handle list devices action"""
        return {
            "type": "list_devices",
            "devices": [
                {
                    "name": device.name,
                    "site": device.site,
                    "actuators": list(device.actuators.keys()),
                    "sensors": list(device.sensors.keys()),
                    "metadata": device._metadata
                }
                for device in self.devices.values()
            ]
        }

    # ... (rest of the methods remain the same) ...
